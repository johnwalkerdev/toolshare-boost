import { supabase } from "@/integrations/supabase/client";

// Admin functions for managing users, products, orders, and tickets
export type Profile = {
  id: string;
  user_id: string;
  full_name?: string;
  email?: string;
  phone?: string;
  plan: string;
  status: string;
  subscription_expires_at?: string;
  created_at: string;
  updated_at: string;
};

export type Product = {
  id: string;
  name: string;
  description?: string;
  price: number;
  monetizze_product_id?: string;
  monetizze_checkout_code?: string;
  status: string;
  category_id?: string;
  created_at: string;
  updated_at: string;
  category?: { name: string };
};

export type Order = {
  id: string;
  customer_name: string;
  customer_email: string;
  customer_phone?: string;
  product_id?: string;
  amount: number;
  status: string;
  payment_method?: string;
  monetizze_transaction_id?: string;
  monetizze_data?: any;
  created_at: string;
  updated_at: string;
  product?: { name: string };
};

export type Ticket = {
  id: string;
  ticket_number: string;
  subject: string;
  message: string;
  customer_name: string;
  customer_email: string;
  priority: string;
  status: string;
  notes: any;
  assigned_to?: string;
  created_at: string;
  updated_at: string;
};

// Profiles (Users) Management
export const getProfiles = async (): Promise<Profile[]> => {
  const { data, error } = await supabase
    .from('profiles')
    .select('*')
    .order('created_at', { ascending: false });
  
  if (error) throw error;
  return data || [];
};

export const createProfile = async (profile: Omit<Profile, 'id' | 'created_at' | 'updated_at'>): Promise<Profile> => {
  const { data, error } = await supabase
    .from('profiles')
    .insert(profile)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const updateProfile = async (id: string, updates: Partial<Profile>): Promise<Profile> => {
  const { data, error } = await supabase
    .from('profiles')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

// Products Management
export const getProducts = async (): Promise<Product[]> => {
  const { data, error } = await supabase
    .from('products')
    .select('*, category:categories(*)')
    .order('created_at', { ascending: false });
  
  if (error) throw error;
  return data || [];
};

export const createProduct = async (product: Omit<Product, 'id' | 'created_at' | 'updated_at' | 'category'>): Promise<Product> => {
  const { data, error } = await supabase
    .from('products')
    .insert(product)
    .select('*, category:categories(*)')
    .single();
  
  if (error) throw error;
  return data;
};

export const updateProduct = async (id: string, updates: Partial<Product>): Promise<Product> => {
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', id)
    .select('*, category:categories(*)')
    .single();
  
  if (error) throw error;
  return data;
};

// Orders Management
export const getOrders = async (): Promise<Order[]> => {
  const { data, error } = await supabase
    .from('orders')
    .select('*, product:products(name)')
    .order('created_at', { ascending: false });
  
  if (error) throw error;
  return data || [];
};

export const createOrder = async (order: Omit<Order, 'id' | 'created_at' | 'updated_at' | 'product'>): Promise<Order> => {
  const { data, error } = await supabase
    .from('orders')
    .insert(order)
    .select('*, product:products(name)')
    .single();
  
  if (error) throw error;
  return data;
};

export const updateOrder = async (id: string, updates: Partial<Order>): Promise<Order> => {
  const { data, error } = await supabase
    .from('orders')
    .update(updates)
    .eq('id', id)
    .select('*, product:products(name)')
    .single();
  
  if (error) throw error;
  return data;
};

// Tickets Management
export const getTickets = async (): Promise<Ticket[]> => {
  const { data, error } = await supabase
    .from('tickets')
    .select('*')
    .order('created_at', { ascending: false });
  
  if (error) throw error;
  return data || [];
};

export const createTicket = async (ticket: Omit<Ticket, 'id' | 'created_at' | 'updated_at' | 'ticket_number' | 'notes'>): Promise<Ticket> => {
  const ticketData = {
    ...ticket,
    notes: [],
    ticket_number: '' // Will be auto-generated by trigger
  };
  
  const { data, error } = await supabase
    .from('tickets')
    .insert(ticketData)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const updateTicket = async (id: string, updates: Partial<Ticket>): Promise<Ticket> => {
  const { data, error } = await supabase
    .from('tickets')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const addTicketNote = async (ticketId: string, note: { author: string; message: string }) => {
  const { data: ticket } = await supabase
    .from('tickets')
    .select('notes')
    .eq('id', ticketId)
    .single();
  
  if (!ticket) throw new Error('Ticket not found');
  
  const existingNotes = Array.isArray(ticket.notes) ? ticket.notes : [];
  const notes = [...existingNotes, { ...note, at: new Date().toISOString() }];
  
  const { data, error } = await supabase
    .from('tickets')
    .update({ notes })
    .eq('id', ticketId)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};